<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use  App\Models\User;
use Mail;
use App\Mail\SendOTP;
use App\Mail\UserVerificationPage;

class LoginController extends Controller
{
    //



    public function UserDashboard(){

        return view('SuperAdminDashboard.SuperAdminDashboard');
    }

    public function LoginPage()
    {
        return view('UserFolder.login');
    }


    public function login(Request $request)
    {
        $credentials = $request->validate([
            'email' => ['required', 'email'],
            'password' => ['required'],
        ]);
    
        if (Auth::attempt(['email' => $credentials['email'], 'password' => $credentials['password']])) {
            $user = Auth::user();
    
            if ($user->status == 'show') {
                $sess = $request->session()->put('email', $request->email); 
    
                switch ($user->role) {
                    case 'customer':
                        return redirect()->route('User.Dashboard');
                    case 'admin':
                        return redirect()->route('Admin.Dashboard', ['Admin' => 'Admin']);
                    case 'superadmin':
                        return redirect()->route('Admin.Dashboard', ['SuperAdmin' => 'SuperAdmin']);
                    default:
                        Auth::logout();
                        return redirect()->route('User.loginPage')
                            ->withErrors(['Errors' => 'Invalid role or status']);
                }
            } elseif ($user->status == 'hide') {
               $RgUserEamil=$user->email;
            //    dd($RgUserEamil);
                // Mail::to($RgUserEamil)->send(new SendOTP($RgUserEamil));
                
                // Auth::logout();
                return $this->VerificationLink($RgUserEamil);
            }
            else {
                Auth::logout();
                
                return redirect()->route('User.loginPage')
                    ->withErrors(['Errors' => 'Account is not Verified,For Varification Click On ']);
            }
        }
        return redirect()->route('User.loginPage')
            ->withInput()
            ->withErrors(['Errors' => 'Invalid credentials']);
    }
    


    public function registrationPage()
    {
        return view('UserFolder.registration');
    }

    
    public function register(Request $request)
    {
        // dd($request->name,$request->email,$request->phone,$request->password);
        
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|email', 
            'phone' => 'required|string|min:10',
            'password' => 'required|string|min:8' 
        ]);
    
        if ($validator->passes()) {
            $user = new User();
            $user->name = $request->name;
            $user->email = $request->email;
            $user->phone = $request->phone;
    
            $user->password = $request->password;   
            $user->otp =rand(1000,9999); 
    
            // Save the user
            $user->save();
            

            $RgUserEamil=$user->email;
            $OTP= $user->otp;
            Mail::to($RgUserEamil)->send(new SendOTP($OTP));


            // return $this->OTPVerification($OTP);
            return $this->OTPVerification($OTP,$RgUserEamil);
        } else {
            return redirect()->back()->withInput()->withErrors($validator);
        }
    }

    // public function OTPVerification($OTP){
        public function OTPVerification($OTP,$RgUserEamil){

        $RgUserEamil=$RgUserEamil;    
        $OTP= $OTP;

        // return view('UserFolder.OTP',compact('OTP'));
        return view('UserFolder.OTP',compact('OTP','RgUserEamil'));

    }

    public function ResendOTP(Request  $request){

        $RgUserEamil=$request->ReEmail;   
        $OTP= rand(1000,9999); 
        // $sess=$request->session(email);   
        // dd($RgUserEamil);
        $user = User::where('email', $request->ReEmail)->first();
    
        if (!$user) {
            return redirect()->back()->with('error', 'User not found.');
        }
            $user->otp = $OTP;
            $user->save();
        
        Mail::to($RgUserEamil)->send(new SendOTP($OTP)); 
        return view('UserFolder.OTP',compact('OTP','RgUserEamil'));
    }
    public function AfterResendOTP(Request $request)
    {
        $validated = $request->validate([
            'ReEmail' => 'required|email',
        ]);
    
        // Find the user by email
        $user = User::where('email', $request->ReEmail)->first();
    
        if (!$user) {
            return redirect()->back()->with('error', 'User not found.');
        }
            $user->status = 'show';
            $user->save();
        return redirect()->route('User.loginPage');
    }

    public function VerificationLink($RgUserEamil){
        
        $RgUserEamil=$RgUserEamil;   
        $OTP= rand(1000,9999); 
        // $sess=$request->session(email);   
        // dd($RgUserEamil);
        Mail::to($RgUserEamil)->send(new UserVerificationPage($OTP)); 
        return view('UserFolder.OTP', compact('OTP', 'RgUserEamil'))
             ->withErrors(['success'=>'Check Your Given Email inbox For OTP']);
    }





    

    public function UserList()
    {
        if(Auth::checK()){
            $data = User::all();  
            return view('UserFolder.UsersTable',compact('data'));
        }
        else{
            return redirect()
            ->route('Uesr.loginPage')
            ->withError('Login First Please!!!');
        }
    }



    public function ShowUser($id)
    {
        if(Auth::checK()){
            $data= User::find($id);
            return view('UserFolder.ShowUser',compact('data'));
        }
        else{
            return redirect()
            ->route('Uesr.loginPage')
            ->withError('Login First Please!!!');
        }
        
    }

    public function edit($id)
    {
    $data = User::find($id);
        return view('UserFolder.UserEdit',compact('data'));
    }

    public function update(Request $request, $id)
    {
      
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email',
            'phone' => 'required|string|min:10',
            'password' => 'string|min:10WW'    
        ]);
    // dd();
        $user = User::find($id);
        if (!$user) {
            return redirect()->back()->with('error', 'User not found.');
        }
    
        // Update the user data
        $user->name = $request->name;
        $user->email = $request->email;
        $user->phone = $request->phone;
        $user->password = $request->password;
        $user->save();
    
        return redirect()->back()->with('success', 'User updated successfully.');
    }
    public function hide($id)
    {
        $user = User::find($id);
        if (!$user) {
            return redirect()->route('User')->with('error', 'User not found.');
        }
        $user->status = "hide";
        $user->save();
    
        return redirect()->back()->with('success', 'User updated successfully.');
    }




    public function RegiDelete($email){
        $res=User::where('email',$email)->delete();
        return redirect()->route('User.RegiPage');
    }
    public function logout(){
        Auth::logout();
        return redirect()->route('User.loginPage');
    }




   
}
